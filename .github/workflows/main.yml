name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      # 3. Instalar Poetry y dependencias
      - name: Install Poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          cd Backend
          poetry install

      # 4. Crear el archivo .env usando GitHub Secrets
      - name: Create .env file from GitHub Secrets
        run: |
          echo "openai_api_key=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "model=${{ secrets.MODEL }}" >> .env
          echo "max_tokens=${{ secrets.MAX_TOKENS }}" >> .env
          echo "temperature=${{ secrets.TEMPERATURE }}" >> .env
          echo "number_of_vectorial_results=${{ secrets.NUMBER_OF_VECTORIAL_RESULTS }}" >> .env
          echo "secret_key=${{ secrets.SECRET_KEY }}" >> .env
          echo "algorithm=${{ secrets.ALGORITHM }}" >> .env
          echo "access_token_expire_minutes=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "mongodb_uri=${{ secrets.MONGODB_URI }}" >> .env
          echo "mongodb_name=${{ secrets.MONGODB_NAME }}" >> .env
          echo "email_username=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "email_password=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "email_from=${{ secrets.EMAIL_FROM }}" >> .env
          echo "email_to=${{ secrets.EMAIL_TO }}" >> .env

      # 5. Cargar variables de entorno
      - name: Load environment variables
        run: |
          set -a
          source .env
          set +a

      # 6. Ejecutar pre-commit para análisis de código
      - name: Run pre-commit
        run: |
          cd Backend
          poetry run pre-commit run --all-files

      # 7. Ejecutar pruebas con pytest y generar reporte de cobertura
      - name: Run tests
        run: |
          cd Backend
          poetry run pytest --cov=app --cov-report=xml test/cases_test.py
